import { Component, Input, OnInit } from '@angular/core';
import { MatDialog } from '@angular/material/dialog';
import { ElasticService } from '_app/elastic.service';
import { CdeTableViewPreferencesComponent } from 'search/tableViewPreferences/cdeTableViewPreferencesComponent';
import { FormTableViewPreferencesComponent } from 'search/tableViewPreferences/formTableViewPreferencesComponent';
import { DataElementElastic, DataType } from 'shared/de/dataElement.model';
import { CdeFormElastic } from 'shared/form/form.model';
import {
    CdeId,
    Designation,
    ElasticQueryResponseForm,
    Item,
    ItemElastic,
    ModuleItem,
    UserSearchSettings,
} from 'shared/models.model';
import { SearchSettings } from 'shared/search/search.model';

const toolTipMap = new Map([
    ['Pin', 'Pin this CDE/Form to a Board'],
    ['NIH-Endorsed', 'NIH-endorsed CDEs have been reviewed and approved by the NIH CDE Governance Committee.'],
    ['Name', 'The name of the CDE/Form'],
    ['Question Texts', 'Standardized question text/field name for data collection'],
    ['Permissible Values', 'List of allowable answers, if the CDE data type is value list'],
    ['Nb of PVs', 'The number of allowable answers for a CDE'],
    ['Steward', 'The organization responsible for the CDEs/Forms'],
    ['Used by', 'Organizations using the CDEs/Forms'],
    [
        'Registration Status',
        'Indicates where a CDE/Form is in the review/vetting process. For more details, please visit the Guide',
    ],
    ['Identifiers', 'External identifiers if the CDE/Form is available from another source'],
    ['Other Names', 'alternative names for the CDE/Form (e.g., from other sources)'],
    ['Updated', 'date updated in the Repository'],
    ['Code Names', 'code that represents the permissible value'],
    ['Unit of Measure', 'e.g., cm, months, percent, breaths per minute, millimeter of mercury, ng/mL'],
    ['Source', 'source data submitted by the Steward'],
    ['NLM ID', 'unique, persistent ID, automatically generated by NLM'],
    [
        'Admin Status',
        'Indicates where this CDE/Form is in the administrative process. For more details please visit our Guide.',
    ],
    ['Questions', 'Number of questions the Form has.'],
    ['Linked Forms', '(For Forms) Forms that are similar in content.'],
    ['Forms', '(For CDEs) Forms that include this CDE.'],
]);

class Heading {
    text: string;
    tooltip: string;

    constructor(text: string) {
        this.text = text;
        this.tooltip = toolTipMap.get(text) || '';
    }
}

type Row =
    | {
          css: 'pin';
          pin: boolean;
      }
    | {
          css: 'nihEndorsed';
          nihEndorsed: boolean;
      }
    | {
          css: 'ids';
          values: CdeId[];
      }
    | {
          css: 'name';
          elt: ItemElastic;
      }
    | {
          css: 'naming';
          values: string[];
      }
    | {
          css: 'permissibleValues multiline-ellipsis';
          datatype: DataType;
          values: string[];
      }
    | {
          css: 'linkedForms';
          values: { tinyId: string; name: string }[];
      }
    | {
          css: 'numQuestions';
          value: number;
      }
    | {
          css: string;
          value?: string;
      };

@Component({
    templateUrl: './tableList.component.html',
    styleUrls: ['./tableList.component.scss'],
})
export class TableListComponent implements OnInit {
    @Input() set elts(elts: ItemElastic[]) {
        this._elts = elts;
        this.render();
    }

    get elts() {
        return this._elts;
    }

    @Input() module!: ModuleItem;
    private _elts!: ItemElastic[];
    headings!: Heading[];
    rows!: Row[][];

    constructor(public dialog: MatDialog, public esService: ElasticService) {}

    ngOnInit() {
        this.render();
    }

    render() {
        if (!this.esService.searchSettings.tableViewFields) {
            return;
        }
        if (this.module === 'cde') {
            this.renderCde();
        } else if (this.module === 'form') {
            this.renderForm();
        }
    }

    renderCde() {
        const tableSetup = this.searchSettings.tableViewFields;
        this.headings = [new Heading('Pin'), new Heading('NIH-Endorsed')];
        if (tableSetup.name) {
            this.headings.push(new Heading('Name'));
        }
        if (tableSetup.questionTexts) {
            this.headings.push(new Heading('Question Texts'));
        }
        if (tableSetup.naming) {
            this.headings.push(new Heading('Other Names'));
        }
        if (tableSetup.permissibleValues) {
            this.headings.push(new Heading('Permissible Values'));
        }
        if (tableSetup.pvCodeNames) {
            this.headings.push(new Heading('Code Names'));
        }
        if (tableSetup.nbOfPVs) {
            this.headings.push(new Heading('Nb of PVs'));
        }
        if (tableSetup.uom) {
            this.headings.push(new Heading('Unit of Measure'));
        }
        if (tableSetup.stewardOrg) {
            this.headings.push(new Heading('Steward'));
        }
        if (tableSetup.usedBy) {
            this.headings.push(new Heading('Used by'));
        }
        if (tableSetup.registrationStatus) {
            this.headings.push(new Heading('Registration Status'));
        }
        if (tableSetup.administrativeStatus) {
            this.headings.push(new Heading('Admin Status'));
        }
        if (tableSetup.ids) {
            this.headings.push(new Heading('Identifiers'));
        }
        if (tableSetup.source) {
            this.headings.push(new Heading('Source'));
        }
        if (tableSetup.updated) {
            this.headings.push(new Heading('Updated'));
        }
        if (tableSetup.tinyId) {
            this.headings.push(new Heading('NLM ID'));
        }
        if (tableSetup.linkedForms) {
            this.headings.push(new Heading('Forms'));
        }

        this.rows = (this.elts as DataElementElastic[]).map(e => {
            const row: Row[] = [
                {
                    css: 'pin',
                    elt: e,
                    pin: true,
                },
                {
                    css: 'nihEndorsed',
                    elt: e,
                    nihEndorsed: true,
                },
            ];
            if (tableSetup.name) {
                row.push({
                    css: 'name',
                    elt: e,
                });
            }
            if (tableSetup.questionTexts) {
                row.push({
                    css: 'naming',
                    values: TableListComponent.truncatedList(
                        TableListComponent.getQuestionTexts(e),
                        n => n.designation
                    ),
                });
            }
            if (tableSetup.naming) {
                row.push({
                    css: 'naming',
                    values: TableListComponent.truncatedList(TableListComponent.getOtherNames(e), n => n.designation),
                });
            }
            if (tableSetup.permissibleValues) {
                row.push({
                    css: 'permissibleValues multiline-ellipsis',
                    datatype: e.valueDomain.datatype,
                    values: TableListComponent.truncatedList(
                        e.valueDomain.datatype === 'Value List' ? e.valueDomain.permissibleValues : undefined,
                        pv => pv.permissibleValue
                    ),
                });
            }
            if (tableSetup.pvCodeNames) {
                row.push({
                    css: 'permissibleValues multiline-ellipsis',
                    datatype: e.valueDomain.datatype,
                    values: TableListComponent.truncatedList(
                        e.valueDomain.datatype === 'Value List' ? e.valueDomain.permissibleValues : undefined,
                        pv => pv.valueMeaningName || ''
                    ),
                });
            }
            if (tableSetup.nbOfPVs) {
                row.push({
                    css: 'nbOfPVs',
                    value: e.valueDomain.nbOfPVs + '',
                });
            }
            if (tableSetup.uom) {
                row.push({
                    css: 'uom',
                    value: e.valueDomain.uom,
                });
            }
            if (tableSetup.stewardOrg) {
                row.push({
                    css: 'stewardOrg',
                    value: e.stewardOrg.name,
                });
            }
            if (tableSetup.usedBy) {
                row.push({
                    css: 'usedBy multiline-ellipsis',
                    value: e.usedBy && TableListComponent.lineClip(e.usedBy.join(', ')),
                });
            }
            if (tableSetup.registrationStatus) {
                row.push({
                    css: 'registrationStatus',
                    value: e.registrationState.registrationStatus,
                });
            }
            if (tableSetup.administrativeStatus) {
                row.push({
                    css: 'administrativeStatus',
                    value: e.registrationState.administrativeStatus,
                });
            }
            if (tableSetup.ids) {
                if (tableSetup.identifiers && tableSetup.identifiers.length > 0) {
                    tableSetup.identifiers.forEach(i => {
                        let value = '';
                        e.ids.forEach(id => {
                            if (id.source === i) {
                                value = id.id + (id.version ? ' v' + id.version : '');
                            }
                        });
                        row.push({
                            css: i,
                            value,
                        });
                    });
                } else {
                    row.push({
                        css: 'ids',
                        values: TableListComponent.truncatedList<CdeId, CdeId>(e.ids, e2 => e2),
                    });
                }
            }
            if (tableSetup.source) {
                row.push({
                    css: 'source',
                    value: e.source,
                });
            }
            if (tableSetup.updated) {
                row.push({
                    css: 'updated',
                    value: e.updated ? new Date(e.updated).toLocaleString('en-US') : '',
                });
            }
            if (tableSetup.tinyId) {
                row.push({
                    css: '',
                    value: e.tinyId,
                });
            }
            if (tableSetup.linkedForms) {
                const lfSettings = this.esService.buildElasticQuerySettings(new SearchSettings(e.tinyId));

                const values: { tinyId: string; name: string }[] = [];
                this.esService.generalSearchQuery(
                    lfSettings,
                    'form',
                    (err?: string, result?: ElasticQueryResponseForm) => {
                        if (result && result.forms) {
                            if (result.forms.length > 5) {
                                result.forms.length = 5;
                            }
                            result.forms.forEach(crf =>
                                values.push({
                                    name: crf.primaryNameCopy,
                                    tinyId: crf.tinyId,
                                })
                            );
                        }
                        row.push({
                            css: 'linkedForms',
                            values,
                        });
                    }
                );
            }
            return row;
        });
    }

    renderForm() {
        const tableSetup = this.searchSettings.tableViewFields;
        this.headings = [new Heading('Pin')];
        if (tableSetup.name) {
            this.headings.push(new Heading('Name'));
        }
        if (tableSetup.naming) {
            this.headings.push(new Heading('Other Names'));
        }
        if (tableSetup.stewardOrg) {
            this.headings.push(new Heading('Steward'));
        }
        if (tableSetup.usedBy) {
            this.headings.push(new Heading('Used by'));
        }
        if (tableSetup.registrationStatus) {
            this.headings.push(new Heading('Registration Status'));
        }
        if (tableSetup.administrativeStatus) {
            this.headings.push(new Heading('Admin Status'));
        }
        if (tableSetup.ids) {
            this.headings.push(new Heading('Identifiers'));
        }
        if (tableSetup.numQuestions) {
            this.headings.push(new Heading('Questions'));
        }
        if (tableSetup.source) {
            this.headings.push(new Heading('Source'));
        }
        if (tableSetup.updated) {
            this.headings.push(new Heading('Updated'));
        }
        if (tableSetup.tinyId) {
            this.headings.push(new Heading('NLM ID'));
        }

        this.rows = this.elts.map(e => {
            const row: Row[] = [
                {
                    css: 'pin',
                    elt: e,
                },
            ];
            if (tableSetup.name) {
                row.push({
                    css: 'name',
                    elt: e,
                });
            }
            if (tableSetup.naming) {
                row.push({
                    css: 'naming',
                    values: TableListComponent.truncatedList(TableListComponent.getOtherNames(e), n => n.designation),
                });
            }
            if (tableSetup.stewardOrg) {
                row.push({
                    css: 'stewardOrg',
                    value: e.stewardOrg.name,
                });
            }
            if (tableSetup.usedBy) {
                row.push({
                    css: 'usedBy multiline-ellipsis',
                    value: e.usedBy && TableListComponent.lineClip(e.usedBy.join(', ')),
                });
            }
            if (tableSetup.registrationStatus) {
                row.push({
                    css: 'registrationStatus',
                    value: e.registrationState.registrationStatus,
                });
            }
            if (tableSetup.administrativeStatus) {
                row.push({
                    css: 'administrativeStatus',
                    value: e.registrationState.administrativeStatus,
                });
            }
            if (tableSetup.ids) {
                if (tableSetup.identifiers && tableSetup.identifiers.length > 0) {
                    tableSetup.identifiers.forEach(i => {
                        let value = '';
                        e.ids.forEach(id => {
                            if (id.source === i) {
                                value = id.id + (id.version ? ' v' + id.version : '');
                            }
                        });
                        row.push({
                            css: i,
                            value,
                        });
                    });
                } else {
                    row.push({
                        css: 'ids',
                        values: TableListComponent.truncatedList<CdeId, CdeId>(e.ids, e2 => e2),
                    });
                }
            }
            if (tableSetup.numQuestions) {
                row.push({
                    css: 'numQuestions',
                    value: (e as CdeFormElastic).numQuestions + '',
                });
            }
            if (tableSetup.source) {
                row.push({
                    css: 'source',
                    value: e.source,
                });
            }
            if (tableSetup.updated) {
                row.push({
                    css: 'updated',
                    value: e.updated ? new Date(e.updated).toLocaleString('en-US') : '',
                });
            }
            if (tableSetup.tinyId) {
                row.push({
                    css: '',
                    value: e.tinyId,
                });
            }
            return row;
        });
    }

    openTableViewPreferences() {
        let viewComponent = CdeTableViewPreferencesComponent;
        if (this.module === 'form') {
            viewComponent = FormTableViewPreferencesComponent;
        }
        const dialogRef = this.dialog.open(viewComponent, {
            width: '550px',
            data: {},
        });
        dialogRef.componentInstance.changed.subscribe(() => {
            this.render();
            this.esService.saveConfiguration();
        });
        dialogRef.componentInstance.closed.subscribe(() => dialogRef.close());
    }

    get searchSettings(): UserSearchSettings {
        return this.esService.searchSettings;
    }

    static readonly maxLines = 5;
    static readonly lineLength = 62;

    static lineClip(line: string | any): string | any {
        return line.length > this.lineLength ? line.substr(0, this.lineLength - 4) + ' ...' : line;
    }

    static truncatedList<T, U = string>(list: T[] | undefined, f: (a: T) => U): U[] {
        if (!Array.isArray(list)) {
            list = [];
        }
        const size = list.length;
        const result: any[] = [];
        for (let i = 0; i < size; i++) {
            const formatted = f(list[i]);
            if (formatted) {
                result.push(typeof formatted === 'string' ? this.lineClip(formatted) : formatted);
            }
            if (typeof formatted === 'string' && result.length === this.maxLines && i + 1 < size) {
                result.push('...');
                i = size;
            }
        }
        return result;
    }

    static getQuestionTexts(e: Item): Designation[] {
        return e.designations.filter(n => {
            if (!n.tags) {
                n.tags = [];
            }
            return n.tags.filter(t => t.indexOf('Question Text') > -1).length > 0;
        });
    }

    static getOtherNames(item: Item): Designation[] {
        return item.designations.filter((n, i) => {
            if (!n.tags) {
                n.tags = [];
            }
            return i > 0 && n.tags.filter(t => t.indexOf('Question Text') > -1).length === 0;
        });
    }
}
