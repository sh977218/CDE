import { DataElementElastic } from 'shared/de/dataElement.model';
import { ElasticQueryResponseAggregationBucket } from 'shared/elastic';
import { CdeFormElastic } from 'shared/form/form.model';
import { Item, ItemElastic } from 'shared/item';
import { ModuleItem, ObjectId, UserRef } from 'shared/models.model';

interface BoardPart {
    _id: ObjectId;
    createdDate: Date;
    description: string;
    elementType: 'board';
    id: string; // generated by mongoose toObject() ???
    name: string;
    owner: UserRef & { userId?: ObjectId };
    pins: BoardPin[];
    shareStatus: 'Private' | 'Public';
    tags: string[];
    type: ModuleItem;
    updatedDate: Date;
    users: BoardUser[];
}

export interface BoardPin {
    name: string;
    pinnedDate: Date;
    tinyId: string;
    type: ModuleItem;
}

export interface BoardUser {
    lastViewed?: Date;
    role?: 'viewer';
    username: string;
}

export type Board = BoardPart & { elts: ItemElastic[] };
export type BoardDe = BoardPart & { elts: DataElementElastic[] };
export type BoardForm = BoardPart & { elts: CdeFormElastic[] };

export interface BoardFilter {
    search?: string;
    sortDirection?: 'asc' | 'desc';
    selectedTags: string[];
    selectedTypes: string[];
    selectedShareStatus: string[];
    sortBy: string;
    tags: ElasticQueryResponseAggregationBucket[];
    types: ElasticQueryResponseAggregationBucket[];
}

export function isBoard(b: Item | Board): b is Board {
    return !!(b as Board).owner;
}
